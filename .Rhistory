ls()
install.packages('tidyverse')
hist(rnorm(1000))
for (i in 1:1000):
for (i in 1:1000)
print(i)
for (i in 1:100000)
print(i)
library(tidyverse)
library(ggthemes)
library(labelled)
library(caret)
install.packages('Hmisc')
source('r_metabolomics_preprocessing/preprocessing_func.R')
adni_slim <- read.csv('data/adni1_slim_wo_csf.csv', stringsAsFactors = T)
setwd("~/Documents/workspace/sa_deep")
source('r_metabolomics_preprocessing/preprocessing_func.R')
adni_slim <- read.csv('data/adni1_slim_wo_csf.csv', stringsAsFactors = T)
adni_slim$VID <- NULL
adni_slim$COHORT <- NULL
adni_slim$X <- NULL
adni_slim$SAMPLE.ID <- NULL
cn <- preprocessing(adni_slim, 0.9, clinGroup = 'CN')
adni_slim$VID <- NULL
adni_slim$COHORT <- NULL
adni_slim$X <- NULL
adni_slim$SAMPLE.ID <- NULL
adni_slim <- read.csv('data/adni1_slim_wo_csf.csv', stringsAsFactors = T)
adni_slim
adni_slim$VID <- NULL
adni_slim$COHORT <- NULL
adni_slim$X <- NULL
adni_slim$SAMPLE.ID <- NULL
str(adni_slim)
cn <- preprocessing(adni_slim, 0.9, clinGroup = 'CN')
adni_slim$last_DX <- as.factor(adni_slim$last_DX)
str(adni_slim)
cn <- preprocessing(adni_slim, 0.9, clinGroup = 'CN')
cn
table(cn$last_DX)
dat = adni_slim
dat$last_DX <- as.factor(dat$last_DX)
dat$last_DX
missing.perc <- apply(dat, 2, function(x) sum(is.na(x))) / nrow(dat) # calculating missing perc
perc = 0.9
dat <- dat[, which(missing.perc < perc)]
dat
dat <- dat[dat$PTMARRY != 'Unknown',] # removing rows where marital status = 'Unknown'
dat <- dat[dat$last_visit > 0,] # Removing rows where last visit <= 0
y <- dat %>%
mutate_all(funs(ifelse(is.na(.), 1, 0))) # created a bunch of bool cols indicating the presence and location of NA values in dat.
blah <- y %>%
select_if(function(col) is.numeric(col) && sum(col) == 0) # sanity check
y <- y %>%
select_if(negate(function(col) is.numeric(col) && sum(col) == 0)) # selecting only columns that indicate at least one na value
names(y) <- paste0(names(y), '_na') # affixing the suffix _na to denote that they are na indicator cols.
dat <- cbind(dat, y) # affixing the na indicator columns to the original dataset.
dummies <- dummyVars(last_DX ~., data = dat) # training the dummy variables model. done before splitting the data, as recommended here https://stats.stackexchange.com/questions/355293/creating-dummy-variables-before-or-after-splitting-to-train-test-datasets
data_numeric <- predict(dummies, newdata= dat) # changing nominal to dummy in the original dataset
data_numeric <- as.data.frame(data_numeric) # ensuring the data is in a data.frame format.
data_numeric <-data.frame(dat$last_DX, data_numeric) # binding the outcome to the dummied data.
names(data_numeric)[1]
names(data_numeric)[1] <- 'last_DX' # ensuring the outcome is called 'last_DX'
data_numeric$X
data_numeric$X <- NULL # removing artifact.
## The below if statement checks the user defined variable clinGroup and isolates the relevant clinical group and standardises the outcome to a binary format.
if (clinGroup == 'CN') {
cn_progress <- data_numeric[data_numeric$DXCN == 1,]
cn_progress$last_DX <- factor(ifelse(cn_progress$last_DX == 'CN',
'CN', 'MCI_AD'),
levels = c('CN', 'MCI_AD'))
} else if (clinGroup == 'MCI') {
cn_progress <- data_numeric[data_numeric$DX.MCI == 1,]
cn_progress$last_DX <- factor(ifelse(cn_progress$last_DX == 'AD',
'Dementia', 'CN_MCI'),
levels = c('CN_MCI', 'Dementia'))
} else {
stop('clinGroup needs to be either CN or MCI. Please try again.')
}
clinGroup = 'CN'
## The below if statement checks the user defined variable clinGroup and isolates the relevant clinical group and standardises the outcome to a binary format.
if (clinGroup == 'CN') {
cn_progress <- data_numeric[data_numeric$DXCN == 1,]
cn_progress$last_DX <- factor(ifelse(cn_progress$last_DX == 'CN',
'CN', 'MCI_AD'),
levels = c('CN', 'MCI_AD'))
} else if (clinGroup == 'MCI') {
cn_progress <- data_numeric[data_numeric$DX.MCI == 1,]
cn_progress$last_DX <- factor(ifelse(cn_progress$last_DX == 'AD',
'Dementia', 'CN_MCI'),
levels = c('CN_MCI', 'Dementia'))
} else {
stop('clinGroup needs to be either CN or MCI. Please try again.')
}
cn_progress$last_DX
data_numeric$DXCN
data_numeric$DX.CN
## The below if statement checks the user defined variable clinGroup and isolates the relevant clinical group and standardises the outcome to a binary format.
if (clinGroup == 'CN') {
cn_progress <- data_numeric[data_numeric$DX.CN == 1,]
cn_progress$last_DX <- factor(ifelse(cn_progress$last_DX == 'CN',
'CN', 'MCI_AD'),
levels = c('CN', 'MCI_AD'))
} else if (clinGroup == 'MCI') {
cn_progress <- data_numeric[data_numeric$DX.MCI == 1,]
cn_progress$last_DX <- factor(ifelse(cn_progress$last_DX == 'AD',
'Dementia', 'CN_MCI'),
levels = c('CN_MCI', 'Dementia'))
} else {
stop('clinGroup needs to be either CN or MCI. Please try again.')
}
table(cn_progress$last_DX) # sanity check
cn_progress$DXCN <- NULL # removes all indicators of baseline diagnosis.
cn_progress$DXDementia <- NULL
cn_progress$DXMCI <- NULL
source('r_metabolomics_preprocessing/preprocessing_func.R')
adni_slim <- read.csv('data/adni1_slim_wo_csf.csv', stringsAsFactors = T)
#table(adni_slim$last_DX)
adni_slim$VID <- NULL
adni_slim$COHORT <- NULL
adni_slim$X <- NULL
adni_slim$SAMPLE.ID <- NULL
#str(adni_slim)
str(adni_slim)
adni_slim$last_DX <- as.factor(adni_slim$last_DX)
cn <- preprocessing(adni_slim, 0.9, clinGroup = 'CN')
table(cn$last_DX)
cn
write.csv(cn, 'data/cn_preprocessed_wo_csf.csv') # writes the resultant data.frame to CSV.
table(cn$last_DX)
